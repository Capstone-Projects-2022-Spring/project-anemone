swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "document"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /upload:
    post:
      tags:
      - "upload"
      summary: Uploads a file.
      consumes:
      - multipart/form-data
      produces:
      - "application/json"
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload.
      - in: formData
        name: note
        type: string
        required: false
        description: Description of file contents.
      responses:
        "415":
          description: "Unsupported Media Type"
      security:
        - docstore_auth:
          - "write:docs"
          - "read:docs"
  /document:
    put:
      tags:
      - "document"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Document"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/findByStatus:
    get:
      tags:
      - "document"
      summary: "Finds Document by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Document"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/{documentId}:
    get:
      tags:
      - "document"
      summary: "Find document by ID"
      description: "Returns a single document"
      operationId: "getDocumentById"
      produces:
      - "application/json"
      parameters:
      - name: "documentId"
        in: "path"
        description: "ID of document to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Document not found"
      security:
      - api_key: []
    delete:
      tags:
      - "document"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDocument"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "documentId"
        in: "path"
        description: "Document id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Document not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/search/:
    get:
      tags:
      - "document search"
      summary: "Search for document by query"
      description: "Returns a body of content"
      operationId: "searchByQuery"
      produces:
      - "application/json"
      parameters:
      - name: "cursorKey"
        in: "query"
        description: "Cursor position string indicates where the query should end"
        required: false
        type: "string"
        format: "string"
      responses:
        "200":
          description: "OK"
          headers:
            link:
              description: A list of relevant content
              type: string
        "406":
          description: "Not acceptable; invalid query supplied"
      security:
      - api_key: []
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation:
    post:
      tags:
      - "annotation"
      summary: "Add an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
  /annotation/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of annotation that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
        "417":
          description:
            "Expectation Failed"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "OK"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    
  
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
    xml:
      name: "Annotation"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User type Admin or Custodian"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Document:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "document status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "document"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "doc"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /doc:
    post:
      tags:
      - "doc"
      summary: "Add a new doc to the database"
      description: ""
      operationId: "addDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "405":
          description: "Invalid input"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
    put:
      tags:
      - "doc"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/findByStatus:
    get:
      tags:
      - "doc"
      summary: "Finds Doc by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Doc"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/{docId}:
    get:
      tags:
      - "doc"
      summary: "Find doc by ID"
      description: "Returns a single doc"
      operationId: "getDocById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of doc to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - api_key: []
    delete:
      tags:
      - "doc"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDoc"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "docId"
        in: "path"
        description: "Doc id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/search/:
    get:
      tags:
      - "document search"
      summary: "Search for a doc by"
      description: "Returns a list of references"
      operationId: "searchByQuery"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "cursorKey"
        in: "query"
        description: "Cursor position string indicates where the query should end"
        required: false
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            link:
              description: A list of relevant content
              type: string
        "400":
          description: "Invalid query supplied"
      security:
      - api_key: []
  /user/{userId}/uploadDoc:
    post:
      tags:
      - "user"
      summary: "uploads an multi-meida document"
      description: ""
      operationId: "uploadDocument"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "document to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation:
    post:
      tags:
      - "annotation"
      summary: "Enter an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
  /annotation/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of annotation that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    
  
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Annotation"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User type Admin or Custodian"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Doc:
    type: "object"
    required:
    - "name"
    - "spUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "doc status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "Doc"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "doc"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /doc:
    post:
      tags:
      - "doc"
      summary: "Add a new doc to the database"
      description: ""
      operationId: "addDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "405":
          description: "Invalid input"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
    put:
      tags:
      - "doc"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/findByStatus:
    get:
      tags:
      - "doc"
      summary: "Finds Doc by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Doc"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/{docId}:
    get:
      tags:
      - "doc"
      summary: "Find doc by ID"
      description: "Returns a single doc"
      operationId: "getDocById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of doc to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - api_key: []
    delete:
      tags:
      - "doc"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDoc"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "docId"
        in: "path"
        description: "Doc id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/search/:
    get:
      tags:
      - "document search"
      summary: "Search for a doc by"
      description: "Returns a list of references"
      operationId: "searchByQuery"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "cursorKey"
        in: "query"
        description: "Cursor position string indicates where the query should end"
        required: false
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            link:
              description: A list of relevant content
              type: string
        "400":
          description: "Invalid query supplied"
        "404":
          description: "Doc links not found"
      security:
      - api_key: []
  /user/{userId}/uploadImage:
    post:
      tags:
      - "user"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation:
    post:
      tags:
      - "annotation"
      summary: "Enter an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
  /annotation/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of annotation that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    
  
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Annotation"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Doc:
    type: "object"
    required:
    - "name"
    - "spUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "doc status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "Doc"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "doc"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /doc:
    post:
      tags:
      - "doc"
      summary: "Add a new doc to the database"
      description: ""
      operationId: "addDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "405":
          description: "Invalid input"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
    put:
      tags:
      - "doc"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/findByStatus:
    get:
      tags:
      - "doc"
      summary: "Finds Doc by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Doc"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/{docId}:
    get:
      tags:
      - "doc"
      summary: "Find doc by ID"
      description: "Returns a single doc"
      operationId: "getDocById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of doc to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - api_key: []
    delete:
      tags:
      - "doc"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDoc"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "docId"
        in: "path"
        description: "Doc id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/search/:
    get:
      tags:
      - "document search"
      summary: "Search for a doc by"
      description: "Returns a list of references"
      operationId: "searchByQuery"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "cursorKey"
        in: "query"
        description: "Cursor position string indicates where the query should end"
        required: false
        type: "string"
        format: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            link:
              description: A list of relevant content
              type: string
        "400":
          description: "Invalid name supplied"
        "404":
          description: "Doc link not found"
      security:
      - api_key: []
  /user/{userId}/uploadImage:
    post:
      tags:
      - "user"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation:
    post:
      tags:
      - "annotation"
      summary: "Enter an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
  /annotation/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of annotation that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    
  
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Annotation"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Doc:
    type: "object"
    required:
    - "name"
    - "spUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "doc status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "Doc"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "doc"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /doc:
    post:
      tags:
      - "doc"
      summary: "Add a new doc to the database"
      description: ""
      operationId: "addDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "405":
          description: "Invalid input"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
    put:
      tags:
      - "doc"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/findByStatus:
    get:
      tags:
      - "doc"
      summary: "Finds Doc by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Doc"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/{docId}:
    get:
      tags:
      - "doc"
      summary: "Find doc by ID"
      description: "Returns a single doc"
      operationId: "getDocById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of doc to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - api_key: []
    delete:
      tags:
      - "doc"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDoc"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "docId"
        in: "path"
        description: "Doc id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /user/{userId}/uploadImage:
    post:
      tags:
      - "user"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation:
    post:
      tags:
      - "annotation"
      summary: "Enter an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
  /annotation/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of annotation that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Annotation"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Doc:
    type: "object"
    required:
    - "name"
    - "spUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "doc status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "Doc"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"swagger: "2.0"
info:
  description: "This is a draft server Anemone server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "anemone.swagger.io"
basePath: "/v2"
tags:
- name: "doc"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /doc:
    post:
      tags:
      - "doc"
      summary: "Add a new doc to the database"
      description: ""
      operationId: "addDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "405":
          description: "Invalid input"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
    put:
      tags:
      - "user"
      summary: "Update an existing user"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Doc"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/findByStatus:
    get:
      tags:
      - "doc"
      summary: "Finds Doc by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Doc"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /doc/{docId}:
    get:
      tags:
      - "doc"
      summary: "Find doc by ID"
      description: "Returns a single doc"
      operationId: "getDocById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of doc to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Doc"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - api_key: []
    delete:
      tags:
      - "doc"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDoc"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "docId"
        in: "path"
        description: "Doc id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /user/{userId}/uploadImage:
    post:
      tags:
      - "user"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation/order:
    post:
      tags:
      - "annotation"
      summary: "Place an order for a annotation"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Order"
  /annotation/order/{annotationId}:
    get:
      tags:
      - "annotation"
      summary: "Find annotation order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getAnnotationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of doc that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
    delete:
      tags:
      - "annotation"
      summary: "Delete annotation order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteAnnotation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "annotationId"
        in: "path"
        description: "ID of the annotation that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Annotation"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Doc:
    type: "object"
    required:
    - "name"
    - "spUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "doc status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "Doc"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

