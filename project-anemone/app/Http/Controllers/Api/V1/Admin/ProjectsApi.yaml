swagger: "2.0"
info:
  description: "This is a draft Anemone API specification.  You can find out more about Anemone at [Anemone](http://anemone.avalonbloom.com). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Anemone Core API v1"
host: "anemone.avalonbloom.com"
basePath: "/V1"
tags:
- name: "document"
  description: "Everything about your References"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "annotation"
  description: "Access to Documentation annotations"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://swagger.io"
    
schemes:
- "https"
- "http"
paths:
  /upload:
    post:
      tags:
      - "upload"
      summary: Uploads a file.
      consumes:
      - multipart/form-data
      produces:
      - "application/json"
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload.
      - in: formData
        name: note
        type: string
        required: false
        description: Description of file contents.
      responses:
        "415":
          description: "Unsupported Media Type"
      security:
        - docstore_auth:
          - "write:docs"
          - "read:docs"
  /document:
    put:
      tags:
      - "document"
      summary: "Update an existing doc"
      description: ""
      operationId: "updateDoc"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Document"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/findByStatus:
    get:
      tags:
      - "document"
      summary: "Finds Document by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findDocsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "visited"
          - "unvisited"
          default: "unvisited"
        collectionFormat: "multi"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Document"
        "400":
          description: "Invalid status value"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/{documentId}:
    get:
      tags:
      - "document"
      summary: "Find document by ID"
      description: "Returns a single document"
      operationId: "getDocumentById"
      produces:
      - "application/json"
      parameters:
      - name: "documentId"
        in: "path"
        description: "ID of document to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Document not found"
      security:
      - api_key: []
    delete:
      tags:
      - "document"
      summary: "Deletes a doc"
      description: ""
      operationId: "deleteDocument"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "documentId"
        in: "path"
        description: "Document id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Document not found"
      security:
      - docstore_auth:
        - "write:docs"
        - "read:docs"
  /document/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of document with given input list"
      description: ""
      operationId: "createDocumentsListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of document object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Document"
      responses:
        "200":
          description: "OK"
        "417":
          description:
            "Expectation Failed"
  /document/search/{path}:
    get:
      tags:
      - "document search"
      summary: "Search for document by query"
      description: "Returns a body of content"
      operationId: "searchByQuery"
      produces:
      - "application/json"
      parameters:
      - name: path
        in: path
        type: string
        required: true
        description: The path to the folder you want to search from.
      - name: query
        in: query
        type: string
        required: true
        description: |
              The search string. This string is split (on spaces) into individual words. Files and folders will be
              returned if they contain all words in the search string.
      - name: include_membership
        in: query
        type: boolean
        required: false
        description: If `true`, metadata for a shared folder will include a list of members and a list of groups.
      responses:
        200:
          description: List of metadata entries for any matching files and folders.
          schema:
            $ref: '#/definitions/SearchResult'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        406:
          description: "Not acceptable; invalid query supplied"
      security:
      - api_key: []
  /annotation/inventory:
    get:
      tags:
      - "annotation"
      summary: "Returns annotation inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /annotation/{path}:
    post:
      tags:
      - "annotation"
      summary: "Add an annotation"
      description: ""
      operationId: "annotate"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      - in: path
        name: path
        type: string
        required: true
        description: The path to the file.
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid Request"
    get:
      tags:
      - "annotation"
      summary: "Find annotation by ID"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getAnnotationById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adding an annotation"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      - in: path
        name: path
        type: string
        required: true
        description: The path to the file.
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Annotation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Annotation not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
        "417":
          description:
            "Expectation Failed"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "OK"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Updated"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /shares/{path}:
    post:
      tags:
        - files
      consumes:
        - application/x-www-form-urlencoded
      summary: Creates and returns a shared link to a file or folder.
      description: |
          Creates and returns a [shared link](https://www.anemone.com/help) to a file or folder.
          Admin users can set restrictions on shared links; the `visibility` field indicates what
          (if any) restrictions are set on this particular link. Possible values include:
            * `PUBLIC` - anyone can view
            * `TEAM_ONLY` - only the owner's team can view
            * `SHARED_FOLDER_ONLY` - only [members](https://www.dropbox.com/help/6636) of the enclosing shared folder can view
          Note that other values may be added at any time.
      parameters:
        - name: path
          in: path
          type: string
          required: true
          description: The path to the file or folder you want to link to.
        - name: short_url
          in: formData
          type: boolean
          required: false
          description: |
              When `true` (default), the URL returned will be shortened using the Dropbox URL shortener. If `false`,
              the URL will link directly to the file's preview page.
      responses:
        200:
          description: Shared link information.
          schema:
            $ref: '#/definitions/SharedLinkResult'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        429:
          $ref: '#/responses/TooManyRequests'  
# security 
securityDefinitions:
  docstore_auth:
    type: "oauth2"
    authorizationUrl: "http://anemone.avalonbloom.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:docs: "modify docs in your account"
      read:docs: "read your docs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
# Error responses
responses:
  BadRequest:
    description: Bad input parameter. Error message should indicate which one and why.
    schema:
      $ref: '#/definitions/ErrorMessage'
  Unauthorized:
    description: |
        Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
        you should re-authenticate the user.
    schema:
      $ref: '#/definitions/ErrorMessage'
  Forbidden:
    description: |
        Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating
        the user won't help here.
    schema:
      $ref: '#/definitions/ErrorMessage'
  SharedFolderForbidden:
    description: |
        Returned if this app does not have Full Dropbox or File type permissions, or if the user doesn't have
        access to the specified shared folder.
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotFound:
    description: File or folder not found at the specified path.
    schema:
      $ref: '#/definitions/ErrorMessage'
  FileNotFound:
    description: File not found at the specified path, or unable to find the revision at that path.
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotAcceptable:
    description: |
        Too many files would be involved in the operation for it to complete successfully. The limit is
        currently 10,000 files and folders.
    schema:
      $ref: '#/definitions/ErrorMessage'
  TooManyRequests:
    description: |
        Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or
        per-user basis.
    schema:
      $ref: '#/definitions/ErrorMessage'

definitions:
  ErrorMessage:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: Error description
  
  Group:
    type: object
    required:
      - name
      - group_id
    properties:
      name:
        type: string
        description: The name of the group the user belongs to
      group_id:
        type: string
        description: The ID of the group the user belongs to
  
  Annotation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      docId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Annotation Status"
        enum:
        - "edited"
    xml:
      name: "Annotation"
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User type Admin or Custodian"
      group:
        $ref: '#/definitions/Group'
        description: If the user belongs to a group, contains group information; otherwise, `null`
    xml:
      name: "User"
  
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  
  MembershipInfo:
    type: object
    required:
      - user
      - access_type
      - active
    properties:
      user:
        items:
          $ref: '#/definitions/User'
        description: Short description of a user
      access_type:
        type: string
        description: Member access type; e.g. "admin", "custodian", "owner", "editor"
      active:
        type: boolean
        description: Indicates whether membership is active or not
  
  SharedFolderInfo:
    type: object
    required:
      - id
      - groups
    properties:
      id:
        type: string
        description: ID of the shared folder
      group_ids:
        type: array
        description: Group names e.g. "TempleU Stu", "ElectricBlueFin"
        items:
          $ref: '#/definitions/Group'
      membership:
        type: array
        description: Members who have access to this folder
        items:
          $ref: '#/definitions/MembershipInfo'
  
  Document:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "document status in the database"
        enum:
        - "visited"
        - "unvisited"
    xml:
      name: "document"
  
  FileMetadata:
    type: object
    required:
      - size
      - bytes
      - path
      - is_dir
      - ant
      - modified
      - root
      - annotation
    properties:
      size:
        type: string
        description: A human-readable description of the file size
      bytes:
        type: integer
        format: int64
        description: The file size in bytes
      path:
        type: string
        description: Returns the canonical path to the file or folder
      is_dir:
        type: boolean
        description: Whether the given entry is a folder or not
      is_deleted:
        type: boolean
        description: Whether the given entry is deleted (only included if deleted files are being returned)
      ant:
        type: string
        description: |
            A unique identifier for the current annotation of a file; this field is the same `ant` as elsewhere in
            the API and can be used to detect changes and avoid conflicts.
      shared_folder:
        items:
          $ref: '#/definitions/SharedFolderInfo'
        description: |
            This field will be included for shared folders; if the `include_membership` parameter is passed, there will
            additionally be a `membership` field and a `group` field.
      group:
        $ref: '#/definitions/Group'
      membership:
        $ref: '#/definitions/MembershipInfo'
      read_only:
        type: boolean
        description: |
            For shared folders, this field specifies whether the user has read-only access to the folder; for files
            within a shared folder, this specifies the read-only status of the parent shared folder
      modified:
        type: string
        description: |
            The last time the file was modified on Anemone, in the standard
            [date format](http://anemone.avalonbloom.com/developers/core/docs#date-format)
      annotation:
        type: integer
        description: A field that semi-uniquely identifies a file; use ant instead
  
  SearchResult:
    description: List of metadata entries for any matching files and folders.
    type: array
    items:
      $ref: '#/definitions/FileMetadata'

  SharedLinkResult:
    type: object
    required:
      - url
    properties:
      url:
        type: string
        description: Actual shared link URL
      visibility:
        type: string
        enum:
          - PUBLIC
          - TEAM_ONLY
          - SHARED_FOLDER_ONLY
        description: Indicates what (if any) restrictions are set on this particular link
        
externalDocs:
  description: "Find out more about Anemone"
  url: "http://anemone.avalonbloom.com/"