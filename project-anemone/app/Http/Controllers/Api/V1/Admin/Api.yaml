swagger: "2.0"
info:
  description: "This is a draft Anemone API specification.  You can find out more about Anemone at [Anemone](http://anemone.avalonbloom.com). For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "2.0.0"
  title: "Anemone Core API v2"
host: "anemone.avalonbloom.com"
basePath: "/V1"
tags:
- name: "retrieve"
  description: "Get Everything about your documents"
  externalDocs:
    description: "Find out more"
    url: "http://anemone.avalonbloom.com/about"
- name: "collect"
  description: "upload your documents"
  externalDocs:
    description: "Find out more"
    url: "http://anemone.avalonbloom.com/about"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our content"
    url: "http://anemone.avalonbloom.com/about"
    
schemes:
- "https"
- "http"
paths:
  /documents/{user_id}/{id}:
    get:
      tags:
      - "retrieve"
      summary: "Retrieve an existing doc"
      description: ""
      operationId: "index"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "userID"
        description: "ID of user"
        required: true
        type: "string"
      - name: "docId"
        in: "docID"
        description: "ID of document to return"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Doc not found"
        "405":
          description: "Validation exception"
      security:
      - api_key: []
  /documents:
    post:
      tags:
      - "retrieve"
      summary: "Find document by ID"
      description: "Returns a single document"
      operationId: "uploadDocumentById"
      produces:
      - "application/json"
      parameters:
      - in: "$request"
        name: "request"
        description: "Doc object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Document"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Document not found"
      security:
      - api_key: []
      
  /register:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by an unregistered user."
      operationId: "register_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "$request"
        name: "request"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
      security:
      - api_key: []
  /email/verify/{id}/{hash}:
    get:
      tags:
      - "user"
      summary: "verify user"
      description: "This can only be done by an registering user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: id
        in: path
        type: string
        required: true
      - name: hash
        in: path
        type: string
        required: true
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
      security:
      - api_key: []
  /email/verification-notification:
    post:
      tags:
      - "user"
      summary: "Verify user"
      operationId: "verification.send"
      description: "This can only be done by an registering user."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Verify user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "OK"
      security:
      - api_key: []
  /login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "sign_in"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "$request"
        in: "request"
        description: "The email and password for login"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"  
  /logout:
    post:
      tags:
      - "user"
      summary: "Logs out current user session"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "$request"
        in: "request"
        description: "Logout request for user"
        required: true
      responses:
        default:
          description: "OK"
# security 
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
# Error responses
responses:
  BadRequest:
    description: Bad input parameter. Error message should indicate which one and why.
    schema:
      $ref: '#/definitions/ErrorMessage'
  Unauthorized:
    description: |
        Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix,
        you should re-authenticate the user.
    schema:
      $ref: '#/definitions/ErrorMessage'
  Forbidden:
    description: |
        Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating
        the user won't help here.
    schema:
      $ref: '#/definitions/ErrorMessage'
  SharedFolderForbidden:
    description: |
        Returned if this app does not have Full Dropbox or File type permissions, or if the user doesn't have
        access to the specified shared folder.
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotFound:
    description: File or folder not found at the specified path.
    schema:
      $ref: '#/definitions/ErrorMessage'
  FileNotFound:
    description: File not found at the specified path, or unable to find the revision at that path.
    schema:
      $ref: '#/definitions/ErrorMessage'
  NotAcceptable:
    description: |
        Too many files would be involved in the operation for it to complete successfully. The limit is
        currently 10,000 files and folders.
    schema:
      $ref: '#/definitions/ErrorMessage'
  TooManyRequests:
    description: |
        Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or
        per-user basis.
    schema:
      $ref: '#/definitions/ErrorMessage'

definitions:
  ErrorMessage:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: Error description
  
  Project:
    type: object
    required:
      - name
      - project_id
    properties:
      name:
        type: string
        description: The name of the project the document belongs to
      project_id:
        type: string
        description: The ID of the project the document belongs to
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User type Admin or Custodian"
      project:
        $ref: '#/definitions/Project'
        description: If the resource belongs to a project and contains project information; otherwise, `null`
    xml:
      name: "User"
  
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  
  Document:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "indexing"
      spUrls:
        type: "array"
        xml:
          name: "spUrl"
          wrapped: true
        items:
          type: "string"
          example: "https://developers.google.com/search/blog/2009/08/optimize-your-crawling-indexing"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "document"
  
  FileMetadata:
    type: object
    required:
      - size
      - bytes
      - path
      - is_dir
      - ant
      - modified
      - root
      - annotation
    properties:
      size:
        type: string
        description: A human-readable description of the file size
      bytes:
        type: integer
        format: int64
        description: The file size in bytes
      path:
        type: string
        description: Returns the canonical path to the file or folder
      is_dir:
        type: boolean
        description: Whether the given entry is a folder or not
      is_deleted:
        type: boolean
        description: Whether the given entry is deleted (only included if deleted files are being returned)
      ant:
        type: string
        description: |
            A unique identifier for the current annotation of a file; this field is the same `ant` as elsewhere in
            the API and can be used to detect changes and avoid conflicts.
      shared_folder:
        items:
          $ref: '#/definitions/SharedFolderInfo'
        description: |
            This field will be included for shared folders; if the `include_membership` parameter is passed, there will
            additionally be a `membership` field and a `project` field.
      project:
        $ref: '#/definitions/Project'
      membership:
        $ref: '#/definitions/MembershipInfo'
      read_only:
        type: boolean
        description: |
            For shared folders, this field specifies whether the user has read-only access to the folder; for files
            within a shared folder, this specifies the read-only status of the parent shared folder
      modified:
        type: string
        description: |
            The last time the file was modified on Anemone, in the standard
            [date format](http://anemone.avalonbloom.com/developers/core/docs#date-format)
      annotation:
        type: integer
        description: A field that semi-uniquely identifies a file; use ant instead
  
  SearchResult:
    description: List of metadata entries for any matching files and folders.
    type: array
    items:
      $ref: '#/definitions/FileMetadata'
        
externalDocs:
  description: "Find out more about Anemone"
  url: "http://anemone.avalonbloom.com/about"
  
